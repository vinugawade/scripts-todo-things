#!/bin/bash

set -euo pipefail

# ─── Config ─────────────────────────────────────────────────────────────
DEFAULT_PATH="/etc/letsencrypt/live"
DAYS_LIMIT=15
EMAIL_RECIPIENT=""
AUTO_RENEW=false
FORCE_RENEW=""
WEBROOT_PATH="/var/www/certbot"

# ─── Colors ─────────────────────────────────────────────────────────────
RED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
NC='\033[0m'

# ─── Argument Parsing ───────────────────────────────────────────────────
while [[ $# -gt 0 ]]; do
  case "$1" in
    -p) cert_path="$2"; shift 2 ;;
    -d) DAYS_LIMIT="$2"; shift 2 ;;
    -e) EMAIL_RECIPIENT="$2"; shift 2 ;;
    --auto) AUTO_RENEW=true; shift ;;
    --now)
      FORCE_RENEW="all"; shift ;;
    --now=*)
      FORCE_RENEW="${1#--now=}"; shift ;;
    -h|--help)
      echo -e "${BLUE}Usage:${NC} $0 -e email [-p path] [-d days] [--auto] [--now[=domain]]"
      exit 0
      ;;
    *) echo -e "${RED}Unknown option:${NC} $1" >&2; exit 1 ;;
  esac
done

# ─── Validation ─────────────────────────────────────────────────────────
if [ -z "$EMAIL_RECIPIENT" ]; then
  echo -e "${RED}❌ Email recipient is required. Use -e you@example.com${NC}"
  exit 1
fi

if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}❌ Must be run with sudo/root.${NC}"
  exit 1
fi

cert_path="${cert_path:-$DEFAULT_PATH}"
[ ! -d "$cert_path" ] && echo -e "${RED}❌ Path not found:${NC} $cert_path" && exit 1

# ─── Output Summary ─────────────────────────────────────────────────────
printf "${BLUE}📁 Checking SSL certs in:${NC} %s\n" "$cert_path"
echo -e "${BLUE}─────────────────────────────────────────────────────────────${NC}"

alert_output=""
confirm_output=""
email_output=""
domains_to_renew=()
has_alerts=false

# ─── Function: Print Cert Info ──────────────────────────────────────────
print_cert_info() {
  local name="$1"
  local date="$2"
  local left="$3"
  local status_icon color

  if (( left <= 0 )); then
    status_icon="🟥"
    color="$RED"
  elif (( left < DAYS_LIMIT )); then
    status_icon="🟨"
    color="$YELLOW"
  else
    status_icon="🟩"
    color="$GREEN"
  fi

  printf "${color}%s %-22s | %-25s | %3s days left${NC}\n" "$status_icon" "$name" "$date" "$left"
}

# ─── Function: Scan Certificates ────────────────────────────────────────
scan_certificates() {
  for domain in "$cert_path"/*; do
    cert="$domain/cert.pem"
    if [ -f "$cert" ]; then
      name=$(basename "$domain" | tr -d ' ')
      expiry_date=$(openssl x509 -in "$cert" -noout -enddate | cut -d= -f2 || continue)
      expiry_ts=$(date -d "$expiry_date" +%s)
      now_ts=$(date +%s)
      days_left=$(( (expiry_ts - now_ts) / 86400 ))

      print_cert_info "$name" "$expiry_date" "$days_left"

      line="$name | $expiry_date | $days_left days left"
      email_output+="$line"$'\n'

      if (( days_left < DAYS_LIMIT )); then
        has_alerts=true
        alert_output+="$line"$'\n'
        domains_to_renew+=("$name")
      fi
    fi
  done
}

# ─── Function: Email Alert ──────────────────────────────────────────────
send_alert_email() {
  echo -e "$alert_output" | mail -s "⚠️ SSL Cert Expiry Alert on $(hostname)" "$EMAIL_RECIPIENT"
  echo -e "${BLUE}📧 Alert sent to $EMAIL_RECIPIENT${NC}"
}

# ─── Function: Email Confirmation ───────────────────────────────────────
send_confirm_email() {
  echo -e "$confirm_output" | mail -s "✅ SSL Certs Renewed on $(hostname)" "$EMAIL_RECIPIENT"
  echo -e "${GREEN}📧 Renewal confirmation sent to $EMAIL_RECIPIENT${NC}"
}

# ─── Function: Auto Renew ───────────────────────────────────────────────
auto_renew() {
  for domain in "${domains_to_renew[@]}"; do
    if certbot certonly --force-renewal --webroot -w "$WEBROOT_PATH" -d "$domain"; then
      confirm_output+="✅ $domain renewed successfully\n"
    fi
  done
}

# ─── Function: Force Renew ──────────────────────────────────────────────
force_renew() {
  if [[ "$FORCE_RENEW" == "all" ]]; then
    if certbot renew --force-renewal; then
      confirm_output+="✅ All certs force-renewed\n"
    fi
  else
    if certbot certonly --force-renewal --webroot -w "$WEBROOT_PATH" -d "$FORCE_RENEW"; then
      confirm_output+="✅ $FORCE_RENEW force-renewed\n"
    fi
  fi
}

# ─── Run Scanner ────────────────────────────────────────────────────────
scan_certificates

# ─── Send Alert If Needed ───────────────────────────────────────────────
$has_alerts && send_alert_email

# ─── Handle Renewals ────────────────────────────────────────────────────
$AUTO_RENEW && auto_renew
[ -n "$FORCE_RENEW" ] && force_renew

# ─── Always Send Confirmation If Renewed ────────────────────────────────
[ -n "$confirm_output" ] && send_confirm_email || true
